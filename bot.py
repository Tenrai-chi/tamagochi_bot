""" –õ–æ–≥–∏–∫–∞ —Ä–∞–±–æ—Ç—ã –±–æ—Ç–∞ """

import asyncio
import logging
import os
from random import sample, choice

from dotenv import load_dotenv
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import (ApplicationBuilder,
                          ContextTypes,
                          filters,
                          CommandHandler,
                          MessageHandler,
                          CallbackQueryHandler)

from database.methods import (get_user,
                              create_user,
                              create_user_tamagochi,
                              get_user_tamagochi,
                              get_types_pet,
                              rename,
                              get_all_foods,
                              update_user_last_request,
                              pet_is_sleep,
                              get_hiding_places,
                              check_is_sick)

from database.create_and_populate_db import initialize_database

from database.pet_condition_update import feed_pet, grooming_pet, therapy, sleep, play_hide_and_seek
from utilites import validation_name


load_dotenv()
TELEGRAM_BOT_TOKEN = os.getenv('bot_token')
logging.basicConfig(format='%(asctime)s - %(name)s - %(levelname)s - %(message)s', level=logging.INFO)

httpx_logger = logging.getLogger("httpx")
httpx_logger.setLevel(logging.WARNING)


def check_user_registered(func):
    """ –î–µ–∫–æ—Ä–∞—Ç–æ—Ä.
        –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–∞ –Ω–∞–ª–∏—á–∏–µ –≤ –±–∞–∑–µ, –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç, —Ç–æ —Å–æ–∑–¥–∞–µ—Ç
    """

    async def wrapper(update: Update, context: ContextTypes.DEFAULT_TYPE):
        user = await get_user(update.effective_user)
        if user is None:
            await create_user(update.effective_user)
            logging.info(f'–ë—ã–ª —Å–æ–∑–¥–∞–Ω –ø—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {update.effective_user.id}')
        return await func(update, context)
    return wrapper


def check_pet_exists(func):
    """ –î–µ–∫–æ—Ä–∞—Ç–æ—Ä
        –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –µ—Å—Ç—å –ª–∏ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–∏—Ç–æ–º–µ—Ü
    """

    async def wrapper(update: Update, context: ContextTypes.DEFAULT_TYPE):
        pet = await get_user_tamagochi(update.effective_user)
        if pet is None:
            await update.message.reply_text('–£ –≤–∞—Å –Ω–µ—Ç –ø–∏—Ç–æ–º—Ü–∞')
            logging.info(f'–ó–∞–ø—Ä–æ—Å –∫ –ø–∏—Ç–æ–º—Ü—É –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {update.effective_user.id}, –∫–æ—Ç–æ—Ä—ã–π –µ–≥–æ –Ω–µ –∏–º–µ–µ—Ç')
            return
        else:
            return await func(update, context)
    return wrapper


def check_pet_is_sleep(func):
    """ –î–µ–∫–æ—Ä–∞—Ç–æ—Ä
        –ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Å–ø–∏—Ç –ª–∏ –ø–∏—Ç–æ–º–µ—Ü –Ω–∞ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç
    """

    async def wrapper(update: Update, context: ContextTypes.DEFAULT_TYPE):
        is_sleep = await pet_is_sleep(update.effective_user)
        if is_sleep['sleep'] is True:
            await update.message.reply_text(is_sleep['reaction'])
            logging.info(f'–ó–∞–ø—Ä–æ—Å –∫ –ø–∏—Ç–æ–º—Ü—É –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {update.effective_user.id}, –ø–æ–∫–∞ –ø–∏—Ç–æ–º–µ—Ü —Å–ø–∏—Ç')
        else:
            return await func(update, context)
    return wrapper


def check_pet_sick(func):
    """ –î–µ–∫–æ—Ä–∞—Ç–æ—Ä
        –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –±–æ–ª–µ–Ω –ª–∏ –ø–∏—Ç–æ–º–µ—Ü
    """

    async def wrapper(update: Update, context: ContextTypes.DEFAULT_TYPE):
        is_sick = await check_is_sick(update.effective_user)
        if is_sick['sick'] is True:
            await update.message.reply_text(is_sick['reaction'])
            logging.info(f'–ó–∞–ø—Ä–æ—Å –∫ –ø–∏—Ç–æ–º—Ü—É –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {update.effective_user.id}, –ø–æ–∫–∞ –ø–∏—Ç–æ–º–µ—Ü –±–æ–ª–µ–Ω')
        else:
            return await func(update, context)
    return wrapper


class PetBot:
    """ Telegram-–±–æ—Ç """

    def __init__(self):
        self.application = ApplicationBuilder().token(TELEGRAM_BOT_TOKEN).build()
        self._register_handlers()

    def _register_handlers(self):
        self.application.add_handler(CommandHandler('start', self.start))
        self.application.add_handler(CommandHandler('create', self.create_pet))
        self.application.add_handler(CommandHandler('rename', self.rename_pet))
        self.application.add_handler(CommandHandler('feed', self.feed))
        self.application.add_handler(CommandHandler('sleep', self.sleep_pet))
        self.application.add_handler(CommandHandler('play', self.play_with_pet))
        self.application.add_handler(CommandHandler('therapy', self.therapy))
        self.application.add_handler(CommandHandler('grooming', self.grooming_pet))
        self.application.add_handler(CommandHandler('check', self.check_pet_stats))
        self.application.add_handler(CommandHandler('XLir3HJkIDRsFyM', self.create_database))
        self.application.add_handler(CallbackQueryHandler(self.choose_pet, pattern=r'pet_.*$'))
        self.application.add_handler(CallbackQueryHandler(self.choice_place, pattern=r'place_.*$'))
        self.application.add_handler(CallbackQueryHandler(self.choose_food, pattern=r'food_.*$'))
        self.application.add_handler(
            MessageHandler(filters.TEXT & ~filters.COMMAND, self.process_user_message))

    @staticmethod
    @check_user_registered
    async def start(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
        """ /start
            –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            –∏–ª–∏ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—é –ø–æ —Å–æ–∑–¥–∞–Ω–∏—é –ø–∏—Ç–æ–º—Ü–∞, –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç
        """

        user_pet = await get_user_tamagochi(update.effective_user)
        await update_user_last_request(update.effective_user)
        if user_pet:
            answer = (f'–ü—Ä–∏–≤–µ—Ç! –Ø —Å–æ—Å–∫—É—á–∏–ª—Å—è\n'
                      f'–í–æ—Ç –∫–∞–∫ —Ç—ã –º–æ–∂–µ—à—å —Å–æ –º–Ω–æ–π –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–æ–≤–∞—Ç—å:\n'
                      f'1. –ö–æ—Ä–º–∏—Ç—å –º–µ–Ω—è - /feed üçΩÔ∏è\n'
                      f'2. –ò–≥—Ä–∞—Ç—å —Å–æ –º–Ω–æ–π - /play üéæ\n'
                      f'3. –£–∫–ª–∞–¥—ã–≤–∞—Ç—å —Å–ø–∞—Ç—å - /sleep üí§\n'
                      f'4. –õ–µ—á–∏—Ç—å –º–µ–Ω—è, –µ—Å–ª–∏ —è –∑–∞–±–æ–ª–µ—é - /heal üíä\n'
                      f'5. –ü–æ–º–µ–Ω—è—Ç—å –º–Ω–µ –∏–º—è - /rename ‚úèÔ∏è\n'
                      f'6. –£–∑–Ω–∞—Ç—å –∫–∞–∫ —è —Å–µ–±—è —á—É–≤—Å—Ç–≤—É—é - /check ‚ù§Ô∏è\n'
                      f'–Ø —Å –Ω–µ—Ç–µ—Ä–ø–µ–Ω–∏–µ–º –∂–¥—É, —á—Ç–æ–±—ã –ø—Ä–æ–≤–µ—Å—Ç–∏ –≤—Ä–µ–º—è —Å —Ç–æ–±–æ–π!')
            await context.bot.send_photo(chat_id=update.effective_user.id,
                                         photo=user_pet.type_pet.image_url,
                                         caption=answer)
        else:
            await update.message.reply_text('–ü—Ä–∏–≤–µ—Ç! –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /create –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –ø–∏—Ç–æ–º—Ü–∞.')
        logging.info(f'–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {update.effective_user.id} /start')

    @staticmethod
    async def create_database(update: Update, _: ContextTypes.DEFAULT_TYPE) -> None:
        """ /initialize_database
            XLir3HJkIDRsFyM - –∫–æ–º–∞–Ω–¥–∞ –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –∏–∑ —Ç–µ–ª–µ–≥—Ä–∞–º–º –±–æ—Ç–∞ (–ø–æ–º–µ–Ω—è—Ç—å –Ω–∞ –±–æ–ª–µ–µ –±–µ–∑–æ–ø–∞—Å–Ω—ã–π –≤—ã–∑–æ–≤ –Ω–µ –∏–∑ –±–æ—Ç–∞)
        """
        await initialize_database()
        await update.message.reply_text('–°–æ–∑–¥–∞–Ω–∞ –±–¥')

    @staticmethod
    @check_pet_exists
    @check_pet_sick
    @check_pet_is_sleep
    async def play_with_pet(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
        """ /play
            –ó–∞–ø—É—Å–∫ –∏–≥—Ä—ã –≤ –ø—Ä—è—Ç–∫–∏
        """

        places = await get_hiding_places()
        random_places = sample(places, 3)
        true_place = choice(random_places)
        context.user_data['true_place'] = true_place['place']
        context.user_data['place_reaction'] = true_place['reaction']

        keyboard = []
        for place in random_places:
            keyboard.append([InlineKeyboardButton(place['place'], callback_data=f'place_{place["place"]}')])
        reply_markup = InlineKeyboardMarkup(keyboard)
        await update.message.reply_text('–Ø —Å–ø—Ä—è—Ç–∞–ª—Å—è, —Ç–µ–ø–µ—Ä—å –Ω–∞–π–¥–∏ –º–µ–Ω—è', reply_markup=reply_markup)
        logging.info(f'–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {update.effective_user.id} –∏–Ω–∏—Ü–∏–∏—Ä–æ–≤–∞–ª –∏–≥—Ä—É –≤ –ø—Ä—è—Ç–∫–∏')

    @staticmethod
    async def choice_place(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
        """ –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –≤—ã–±–æ—Ä –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
            –£–¥–∞–ª—è–µ—Ç –≤–∞—Ä–∏–∞–Ω—Ç—ã –≤—ã–±–æ—Ä–∞ –∏–∑ –¥–∏–∞–ª–æ–≥–∞
            –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–≥–∞–¥–∞–ª –ø—Ä–∞–≤–∏–ª—å–Ω–æ–µ –º–µ—Å—Ç–æ, —Ç–æ –æ–±–Ω–æ–≤–ª–µ—Ç —Å—Ç–∞—Ç—ã –ø–∏—Ç–æ–º—Ü–∞.
            –ï—Å–ª–∏ –Ω–µ —É–≥–∞–¥–∞–ª, —Ç–æ –ø—Ä–µ–¥–ª–∞–≥–∞–µ—Ç –Ω–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ
        """

        query = update.callback_query
        await query.answer()
        await query.edit_message_reply_markup(reply_markup=None)
        user_choice_place = query.data.split('_')[1]
        if user_choice_place == context.user_data['true_place']:
            user_pet = await play_hide_and_seek(update.effective_user)
            place_reaction = context.user_data['place_reaction']
            answer = (f'{place_reaction}\n'
                      f'{user_pet["reaction"]}\n'
                      f'/play'
                      )
            await context.bot.send_message(update.effective_user.id, answer)
        else:
            answer = (f'–¢—ã –Ω–µ —É–≥–∞–¥–∞–ª! –Ø –ø—Ä–∞—Ç–∞–ª—Å—è –≤ –¥—Ä—É–≥–æ–º –º–µ—Å—Ç–µ, –ø–æ–ø—Ä–æ–±—É–µ–º —Å–Ω–æ–≤–∞?\n'
                      f'/play')
            await context.bot.send_message(update.effective_user.id, answer)
        del context.user_data['true_place']
        del context.user_data['place_reaction']

    @staticmethod
    @check_pet_exists
    @check_pet_is_sleep
    async def grooming_pet(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
        """ /grooming
            –ú—ã—Ç—å–µ –ø–∏—Ç–æ–º—Ü–∞
        """

        user_pet = await grooming_pet(update.effective_user)
        answer = (f'{user_pet["reaction"]}\n'
                  f'–Ø —Å–µ–±—è —á—É–≤—Å—Ç–≤—É—é –≤–æ—Ç —Ç–∞–∫:\n'
                  f'–ó–¥–æ—Ä–æ–≤—å–µ: {user_pet["health"]}\n'
                  f'–ù–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ: {user_pet["happiness"]}\n'
                  f'–ß–∏—Å—Ç–æ—Ç–∞: {user_pet["grooming"]}\n'
                  f'–≠–Ω–µ—Ä–≥–∏—è: {user_pet["energy"]}\n'
                  f'–ì–æ–ª–æ–¥: {user_pet["hunger"]}\n'
                  )
        if user_pet['sick']:
            answer += '–Ø –∑–∞–±–æ–ª–µ–ª('
        else:
            answer += '–Ø –∑–¥–æ—Ä–æ–≤)'
        await context.bot.send_message(update.effective_user.id, answer)

    @staticmethod
    @check_pet_exists
    @check_pet_is_sleep
    async def therapy(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
        """ /therapy
            –õ–µ—á–µ–Ω–∏–µ –ø–∏—Ç–æ–º—Ü–∞
        """

        user_pet = await therapy(update.effective_user)
        answer = (f'{user_pet["reaction"]}\n'
                  f'–Ø —Å–µ–±—è —á—É–≤—Å—Ç–≤—É—é –≤–æ—Ç —Ç–∞–∫:\n'
                  f'–ó–¥–æ—Ä–æ–≤—å–µ: {user_pet["health"]}\n'
                  f'–ù–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ: {user_pet["happiness"]}\n'
                  f'–ß–∏—Å—Ç–æ—Ç–∞: {user_pet["grooming"]}\n'
                  f'–≠–Ω–µ—Ä–≥–∏—è: {user_pet["energy"]}\n'
                  f'–ì–æ–ª–æ–¥: {user_pet["hunger"]}\n'
                  )
        if user_pet['sick']:
            answer += '–Ø –∑–∞–±–æ–ª–µ–ª('
        else:
            answer += '–Ø –∑–¥–æ—Ä–æ–≤)'
        await context.bot.send_message(update.effective_user.id, answer)

    @staticmethod
    @check_pet_exists
    @check_pet_is_sleep
    async def sleep_pet(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
        """ /sleep
            –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –ø–∏—Ç–æ–º—Ü–∞ —Å–ø–∞—Ç—å
        """

        pet = await sleep(update.effective_user)
        await context.bot.send_message(update.effective_user.id, pet['reaction'])
        logging.info(f'–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {update.effective_user} —Ç–ø—Ä–∞–≤–∏–ª –ø–∏—Ç–æ–º—Ü–∞ —Å–ø–∞—Ç—å')

    @staticmethod
    @check_user_registered
    async def create_pet(update: Update, _: ContextTypes.DEFAULT_TYPE) -> None:
        """ /create
            –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç —Å–æ–∑–¥–∞–Ω–∏–µ –ø–∏—Ç–æ–º—Ü–∞.
            –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –ø—Ä–µ–¥–ª–∞–≥–∞–µ—Ç—Å—è –Ω–∞ –≤—ã–±–æ—Ä —Ç–∏–ø –ø–∏—Ç–æ–º—Ü–∞
        """
        user_pet = await get_user_tamagochi(update.effective_user)
        await update_user_last_request(update.effective_user)
        if user_pet:
            await update.message.reply_text(f'–•–µ–π, —É —Ç–µ–±—è —É–∂–µ –µ—Å—Ç—å —è, {user_pet.name}')
        else:
            type_pets = await get_types_pet()
            keyboard = []
            for type_pet in type_pets:
                keyboard.append([InlineKeyboardButton(type_pet, callback_data=f'pet_{type_pet}')])

            reply_markup = InlineKeyboardMarkup(keyboard)
            await update.message.reply_text('–í—ã–±–µ—Ä–∏—Ç–µ –ø–∏—Ç–æ–º—Ü–∞:', reply_markup=reply_markup)
            logging.info(f'–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {update.effective_user.id} –∏–Ω–∏—Ü–∏–∏—Ä–æ–≤–∞–ª —Å–æ–∑–¥–∞–Ω–∏–µ –ø–∏—Ç–æ–º—Ü–∞')

    @staticmethod
    async def choose_pet(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
        """ –°–æ—Ö—Ä–∞–Ω—è–µ—Ç –≤—ã–±–æ—Ä —Ç–∏–ø–∞ –ø–∏—Ç–æ–º—Ü–∞.
            –£–¥–∞–ª—è–µ—Ç –≤–∞—Ä–∏–∞–Ω—Ç—ã –≤—ã–±–æ—Ä–∞ –∏–∑ –¥–∏–∞–ª–æ–≥–∞.
            –ó–∞–ø—É—Å–∫–∞–µ—Ç –æ–∂–∏–¥–∞–Ω–∏–µ –≤–≤–æ–¥–∞ –∏–º–µ–Ω–∏ –≤ context
        """

        pet = await get_user_tamagochi(update.effective_user)
        if pet is not None:
            await update.message.reply_text(f'–•–µ–π, —É —Ç–µ–±—è —É–∂–µ –µ—Å—Ç—å —è, {pet.name}')
        else:
            query = update.callback_query
            await query.answer()
            await query.edit_message_reply_markup(reply_markup=None)

            pet_type = query.data.split('_')[1]
            context.user_data['pet_type'] = pet_type

            await context.bot.send_message(update.effective_user.id, '–í—ã–±–µ—Ä–∏—Ç–µ –∏–º—è –¥–ª—è –≤–∞—à–µ–≥–æ –ø–∏—Ç–æ–º—Ü–∞:')

            logging.info(f'–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {update.effective_user.id} —Å–æ–∑–¥–∞–ª –ø–∏—Ç–æ–º—Ü–∞ {pet_type}')

        context.user_data['waiting_for_name'] = True

    @staticmethod
    @check_pet_exists
    async def rename_pet(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
        """ /rename.
            –ó–∞–ø—É—Å–∫–∞–µ—Ç –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è –≤—ã–±–æ—Ä–∞ –Ω–æ–≤–æ–≥–æ –∏–º–µ–Ω–∏ –ø–∏—Ç–æ–º—Ü–∞
        """

        await update_user_last_request(update.effective_user)
        await update.message.reply_text('–ö–∞–∫ —Ç—ã –º–µ–Ω—è —Ö–æ—á–µ—à—å –Ω–∞–∑–≤–∞—Ç—å?')
        context.user_data['rename'] = True

    @staticmethod
    @check_pet_exists
    @check_pet_is_sleep
    async def feed(update: Update, _: ContextTypes.DEFAULT_TYPE) -> None:
        """ /feed.
            –ü—Ä–µ–¥–ª–∞–≥–∞–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –≤—ã–±—Ä–∞—Ç—å –∫–∞–∫–æ–π –µ–¥–æ–π –ø–æ–∫–æ—Ä–º–∏—Ç—å –ø–∏—Ç–æ–º—Ü–∞
        """

        await update_user_last_request(update.effective_user)
        foods = await get_all_foods()
        keyboard = []
        for food in foods:
            keyboard.append([InlineKeyboardButton(food, callback_data=f'food_{food}')])
        reply_markup = InlineKeyboardMarkup(keyboard)
        await update.message.reply_text('–ß–µ–º —Ç—ã –º–µ–Ω—è –ø–æ–∫–æ—Ä–º–∏—à—å?', reply_markup=reply_markup)

    @staticmethod
    async def choose_food(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
        """ –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤—ã–±–æ—Ä–∞ –µ–¥—ã.
            –£–¥–∞–ª—è–µ—Ç –≤–∞—Ä–∏–∞–Ω—Ç—ã –æ—Ç–≤–µ—Ç–∞ –∏–∑ –¥–∏–∞–ª–æ–≥–∞.
            –ó–∞–ø—É—Å–∫–∞–µ—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫ –ø–∏—Ç–æ–º—Ü–∞
        """

        query = update.callback_query
        await query.answer()
        await query.edit_message_reply_markup(reply_markup=None)

        my_food = query.data.split('_')[1]
        user_pet = await feed_pet(update.effective_user, my_food)
        answer = (f'{user_pet["reaction"]}\n'
                  f'–Ø —Å–µ–±—è —á—É–≤—Å—Ç–≤—É—é –≤–æ—Ç —Ç–∞–∫:\n'
                  f'–ó–¥–æ—Ä–æ–≤—å–µ: {user_pet["health"]}\n'
                  f'–ù–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ: {user_pet["happiness"]}\n'
                  f'–ß–∏—Å—Ç–æ—Ç–∞: {user_pet["grooming"]}\n'
                  f'–≠–Ω–µ—Ä–≥–∏—è: {user_pet["energy"]}\n'
                  f'–ì–æ–ª–æ–¥: {user_pet["hunger"]}\n'
                  )
        if user_pet['sick']:
            answer += '–Ø –∑–∞–±–æ–ª–µ–ª('
        else:
            answer += '–Ø –∑–¥–æ—Ä–æ–≤)'
        await context.bot.send_message(update.effective_user.id, answer)

        logging.info(f'–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {update.effective_user.id} –ø–æ–∫–æ—Ä–º–∏–ª –ø–∏—Ç–æ–º—Ü–∞')

    async def process_user_message(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
        """ –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–æ–±—â–µ–Ω–∏–π.
            –ü–µ—Ä–µ–¥–∞–µ—Ç —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –¥—Ä—É–≥–∏–º —Ñ—É–Ω–∫—Ü–∏—è–º –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
            –ï—Å–ª–∏ waiting_for_name = True, —Ç–æ –æ–∂–∏–¥–∞–µ—Ç –≤–≤–æ–¥–∞ –∏–º–µ–Ω–∏ –ø–∏—Ç–æ–º—Ü–∞
            –ï—Å–ª–∏ rename = True, —Ç–æ –æ–∂–∏–¥–∞–µ—Ç –≤–≤–æ–¥–∞ –Ω–æ–≤–æ–≥–æ –∏–º–µ–Ω–∏
        """

        if context.user_data.get('waiting_for_name'):
            await self.input_name(update, context)
        if context.user_data.get('rename'):
            await self.input_name_for_rename(update, context)

    @staticmethod
    @validation_name
    async def input_name(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
        """ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤–≤–æ–¥–∏—Ç –∏–º–µ–Ω–∏ –ø–∏—Ç–æ–º—Ü–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ """

        pet_name = update.message.text
        pet_type = context.user_data.get('pet_type')
        context.user_data['pet_name'] = pet_name
        logging.info(f'–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {update.effective_user.id} –≤—ã–±—Ä–∞–ª –∏–º—è –ø–∏—Ç–æ–º—Ü–∞ {pet_name}')

        pet = await create_user_tamagochi(update.effective_user,
                                          pet_name,
                                          pet_type)
        answer = (f'–ü—Ä–∏–≤–µ—Ç! –Ø —Ç–≤–æ–π –Ω–æ–≤—ã–π –ø–∏—Ç–æ–º–µ—Ü {pet_type} –ø–æ –∏–º–µ–Ω–∏ {pet_name} üêæ\n!'
                  f'–í–æ—Ç –∫–∞–∫ —Ç—ã –º–æ–∂–µ—à—å —Å–æ –º–Ω–æ–π –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–æ–≤–∞—Ç—å:\n'
                  f'1. –ö–æ—Ä–º–∏—Ç—å –º–µ–Ω—è - /feed üçΩÔ∏è\n'
                  f'2. –ò–≥—Ä–∞—Ç—å —Å–æ –º–Ω–æ–π - /play üéæ\n'
                  f'3. –£–∫–ª–∞–¥—ã–≤–∞—Ç—å —Å–ø–∞—Ç—å - /sleep üí§\n'
                  f'4. –õ–µ—á–∏—Ç—å –º–µ–Ω—è, –µ—Å–ª–∏ —è –∑–∞–±–æ–ª–µ—é - /heal üíä\n'
                  f'5. –ü–æ–º–µ–Ω—è—Ç—å –º–Ω–µ –∏–º—è - /rename ‚úèÔ∏è\n'
                  f'6. –£–∑–Ω–∞—Ç—å –∫–∞–∫ —è —Å–µ–±—è —á—É–≤—Å—Ç–≤—É—é - /check ‚ù§Ô∏è\n'
                  f'–Ø —Å –Ω–µ—Ç–µ—Ä–ø–µ–Ω–∏–µ–º –∂–¥—É, —á—Ç–æ–±—ã –ø—Ä–æ–≤–µ—Å—Ç–∏ –≤—Ä–µ–º—è —Å —Ç–æ–±–æ–π!')
        await context.bot.send_photo(chat_id=update.effective_user.id,
                                     photo=pet.type_pet.image_url,
                                     caption=answer)

        del context.user_data['pet_type']
        del context.user_data['pet_name']
        del context.user_data['waiting_for_name']

    @staticmethod
    @validation_name
    async def input_name_for_rename(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
        """ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤–≤–æ–¥ –∏–º–µ–Ω–∏ –ø–∏—Ç–æ–º—Ü–∞ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –∏ –æ–±–Ω–æ–≤–ª—è–µ—Ç –∏–º—è """

        new_name = update.message.text
        await rename(update.effective_user, new_name)
        await update.message.reply_text(f'–¢–µ–ø–µ—Ä—å –º–µ–Ω—è –∑–æ–≤—É—Ç {new_name}')
        del context.user_data['rename']
        logging.info(f'–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {update.effective_user.id} –ø–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–ª –ø–∏—Ç–æ–º—Ü–∞')

    @staticmethod
    @check_pet_exists
    async def check_pet_stats(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
        """ /check_pet.
            –í—ã–≤–æ–¥–∏—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –µ–≥–æ –ø–∏—Ç–æ–º—Ü–∞
        """

        await update_user_last_request(update.effective_user)
        pet = await get_user_tamagochi(update.effective_user)
        answer = (f'–Ø —Å–µ–±—è —á—É–≤—Å—Ç–≤—É—é –≤–æ—Ç —Ç–∞–∫:\n'
                  f'–ó–¥–æ—Ä–æ–≤—å–µ: {pet.health}\n'
                  f'–ù–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ: {pet.happiness}\n'
                  f'–ß–∏—Å—Ç–æ—Ç–∞: {pet.grooming}\n'
                  f'–≠–Ω–µ—Ä–≥–∏—è: {pet.energy}\n'
                  f'–ì–æ–ª–æ–¥: {pet.hunger}\n'
                  )
        if pet.sick:
            answer += '–Ø –∑–∞–±–æ–ª–µ–ª('
        else:
            answer += '–Ø –∑–¥–æ—Ä–æ–≤)'
        await context.bot.send_photo(chat_id=update.effective_user.id,
                                     photo=pet.type_pet.image_url,
                                     caption=answer)
        logging.info(f'–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {update.effective_user.id} –ø—Ä–æ–≤–µ—Ä–∏–ª —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–∏—Ç–æ–º—Ü–∞')

    async def _shutdown(self):
        """ –ó–∞–∫—Ä—ã–≤–∞–µ—Ç –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ, –æ–∂–∏–¥–∞—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ç–∞—Å–∫–æ–≤, –µ—Å–ª–∏ —Ç–∞–∫–∏–µ –∏–º–µ—é—Ç—Å—è """

        tasks = asyncio.all_tasks()
        if tasks:
            await asyncio.gather(*tasks)
        await self.application.shutdown()

    def run(self):
        """ –ó–∞–ø—É—Å–∫–∞–µ—Ç –ø—Ä–æ—Å–ª—É—à–∏–≤–∞–Ω–∏–µ –±–æ—Ç–∞,
            –∞ –∑–∞—Ç–µ–º –∑–∞–ø—É—Å–∫–∞–µ—Ç –∑–∞–∫—Ä—ã—Ç–∏–µ, –ø—Ä–∏ –ø–æ–ø—ã—Ç–∫–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Ä–∞–±–æ—Ç—ã –ø—Ä–æ–≥—Ä–∞–º–º—ã
        """
        try:
            self.application.run_polling()
        except Exception as e:
            print(e)
        finally:
            asyncio.run(self._shutdown())


# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ –∏–∑ –ø—Ä–æ–µ–∫—Ç–∞
if __name__ == '__main__':
    bot = PetBot()
    bot.run()
