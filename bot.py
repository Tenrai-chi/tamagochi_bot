""" –õ–æ–≥–∏–∫–∞ —Ä–∞–±–æ—Ç—ã –±–æ—Ç–∞ """

import logging
from database.methods import (get_user,
                              create_user,
                              create_user_tamagochi,
                              get_user_tamagochi,
                              get_types_pet,
                              rename,
                              get_all_foods)

from database.pet_condition_update import feed_pet
import utilites
from database import pet_condition_update
from configparser import ConfigParser
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import (ApplicationBuilder,
                          ContextTypes,
                          filters,
                          CommandHandler,
                          MessageHandler,
                          CallbackQueryHandler)


config = ConfigParser()
config.read('config.ini')
TELEGRAM_BOT_TOKEN = config['telegram']['bot_token']

logging.basicConfig(format='%(asctime)s - %(name)s - %(levelname)s - %(message)s', level=logging.INFO)

httpx_logger = logging.getLogger("httpx")
httpx_logger.setLevel(logging.WARNING)


def check_user_registered(func):
    """ –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–∞ –Ω–∞–ª–∏—á–∏–µ –≤ –±–∞–∑–µ, –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç, —Ç–æ —Å–æ–∑–¥–∞–µ—Ç """

    async def wrapper(update: Update, context: ContextTypes.DEFAULT_TYPE):
        user = await get_user(update.effective_user)
        if user is None:
            await create_user(update.effective_user)
            logging.info(f'–ë—ã–ª —Å–æ–∑–¥–∞–Ω –ø—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {update.effective_user.id}')
        return await func(update, context)
    return wrapper


def check_pet_exists(func):
    """ –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –µ—Å—Ç—å –ª–∏ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–∏—Ç–æ–º–µ—Ü """

    async def wrapper(update: Update, context: ContextTypes.DEFAULT_TYPE):
        pet = await get_user_tamagochi(update.effective_user)
        if pet is None:
            await update.message.reply_text('–£ –≤–∞—Å –Ω–µ—Ç –ø–∏—Ç–æ–º—Ü–∞')
            logging.info(f'–ó–∞–ø—Ä–æ—Å –∫ –ø–∏—Ç–æ–º—Ü—É –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {update.effective_user.id}, –∫–æ—Ç–æ—Ä—ã–π –µ–≥–æ –Ω–µ –∏–º–µ–µ—Ç')
        else:
            return await func(update, context)
    return wrapper


@check_user_registered
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """ /start """

    user_pet = await get_user_tamagochi(update.effective_user)
    if user_pet:
        answer = (f'–ü—Ä–∏–≤–µ—Ç! –Ø —Å–æ—Å–∫—É—á–∏–ª—Å—è\n'
                  f'–í–æ—Ç –∫–∞–∫ —Ç—ã –º–æ–∂–µ—à—å —Å–æ –º–Ω–æ–π –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–æ–≤–∞—Ç—å:\n'
                  f'1. –ö–æ—Ä–º–∏—Ç—å –º–µ–Ω—è - /feed üçΩÔ∏è\n'
                  f'2. –ò–≥—Ä–∞—Ç—å —Å–æ –º–Ω–æ–π - /play üéæ\n'
                  f'3. –£–∫–ª–∞–¥—ã–≤–∞—Ç—å —Å–ø–∞—Ç—å - /sleep üí§\n'
                  f'4. –õ–µ—á–∏—Ç—å –º–µ–Ω—è, –µ—Å–ª–∏ —è –∑–∞–±–æ–ª–µ—é - /heal üíä\n'
                  f'5. –ü–æ–º–µ–Ω—è—Ç—å –º–Ω–µ –∏–º—è - /rename ‚úèÔ∏è\n'
                  f'6. –£–∑–Ω–∞—Ç—å –∫–∞–∫ —è —Å–µ–±—è —á—É–≤—Å—Ç–≤—É—é - /check ‚ù§Ô∏è\n'
                  f'–Ø —Å –Ω–µ—Ç–µ—Ä–ø–µ–Ω–∏–µ–º –∂–¥—É, —á—Ç–æ–±—ã –ø—Ä–æ–≤–µ—Å—Ç–∏ –≤—Ä–µ–º—è —Å —Ç–æ–±–æ–π!')
        await update.message.reply_text(answer)
    else:
        await update.message.reply_text('–ü—Ä–∏–≤–µ—Ç! –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /create_pet –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –ø–∏—Ç–æ–º—Ü–∞.')
    logging.info(f'–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {update.effective_user.id} /start')


@check_user_registered
async def create_pet(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """ /create_pet.
        –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–æ–∑–¥–∞–Ω–∏—è –ø–∏—Ç–æ–º—Ü–∞.
        –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –ø—Ä–µ–¥–ª–∞–≥–∞–µ—Ç—Å—è –Ω–∞ –≤—ã–±–æ—Ä —Ç–∏–ø –ø–∏—Ç–æ–º—Ü–∞
    """

    user_pet = await get_user_tamagochi(update.effective_user)
    if user_pet:
        await update.message.reply_text(f'–•–µ–π, —É —Ç–µ–±—è —É–∂–µ –µ—Å—Ç—å —è, {user_pet.name}')
    else:
        type_pets = await get_types_pet()
        keyboard = []
        for type_pet in type_pets:
            keyboard.append([InlineKeyboardButton(type_pet, callback_data=f'pet_{type_pet}')])

        reply_markup = InlineKeyboardMarkup(keyboard)
        await update.message.reply_text('–í—ã–±–µ—Ä–∏—Ç–µ –ø–∏—Ç–æ–º—Ü–∞:', reply_markup=reply_markup)
        logging.info(f'–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {update.effective_user.id} –∏–Ω–∏—Ü–∏–∏—Ä–æ–≤–∞–ª —Å–æ–∑–¥–∞–Ω–∏–µ –ø–∏—Ç–æ–º—Ü–∞')


async def choose_pet(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """ –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤—ã–±–æ—Ä–∞ —Ç–∏–ø–∞ –ø–∏—Ç–æ–º—Ü–∞.
        –£–¥–∞–ª—è–µ—Ç –≤–∞—Ä–∏–∞–Ω—Ç—ã –≤—ã–±–æ—Ä–∞ –∏–∑ –¥–∏–∞–ª–æ–≥–∞.
        –ó–∞–ø—É—Å–∫–∞–µ—Ç –æ–∂–∏–¥–∞–Ω–∏–µ –≤–≤–æ–¥–∞ –∏–º–µ–Ω–∏ –≤ context
    """

    pet = await get_user_tamagochi(update.effective_user)
    if pet is not None:
        await update.message.reply_text(f'–•–µ–π, —É —Ç–µ–±—è —É–∂–µ –µ—Å—Ç—å —è, {pet.name}')
    else:
        query = update.callback_query
        await query.answer()
        await query.edit_message_reply_markup(reply_markup=None)

        pet_type = query.data.split('_')[1]
        context.user_data['pet_type'] = pet_type

        await query.message.reply_text('–í—ã–±–µ—Ä–∏—Ç–µ –∏–º—è –¥–ª—è –≤–∞—à–µ–≥–æ –ø–∏—Ç–æ–º—Ü–∞:')

        logging.info(f'–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {update.effective_user.id} —Å–æ–∑–¥–∞–ª –ø–∏—Ç–æ–º—Ü–∞ {pet_type}')

    context.user_data['waiting_for_name'] = True


@check_user_registered
async def rename_pet(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    await update.message.reply_text('–ö–∞–∫ —Ç—ã –º–µ–Ω—è —Ö–æ—á–µ—à—å –Ω–∞–∑–≤–∞—Ç—å?')
    context.user_data['rename'] = True


@check_pet_exists
async def feed(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """ /feed """
    # await pet_condition_update.feed(update.effective_user, '–û–≤–æ—â–Ω–æ–π —Å–∞–ª–∞—Ç')
    foods = await get_all_foods()
    keyboard = []
    for food in foods:
        keyboard.append([InlineKeyboardButton(food, callback_data=f'food_{food}')])
    reply_markup = InlineKeyboardMarkup(keyboard)
    await update.message.reply_text('–ß–µ–º —Ç—ã –º–µ–Ω—è –ø–æ–∫–æ—Ä–º–∏—à—å?', reply_markup=reply_markup)


async def choose_food(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """ –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤—ã–±–æ—Ä–∞ –µ–¥—ã.
        –£–¥–∞–ª—è–µ—Ç –≤–∞—Ä–∏–∞–Ω—Ç—ã –æ—Ç–≤–µ—Ç–∞ –∏–∑ –¥–∏–∞–ª–æ–≥–∞.
        –ó–∞–ø—É—Å–∫–∞–µ—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫ –ø–∏—Ç–æ–º—Ü–∞
    """

    query = update.callback_query
    await query.answer()
    await query.edit_message_reply_markup(reply_markup=None)

    my_food = query.data.split('_')[1]
    user_pet = await feed_pet(update.effective_user, my_food)
    answer = (f'–Ø —Å–µ–±—è —á—É–≤—Å—Ç–≤—É—é –≤–æ—Ç —Ç–∞–∫:\n'
              f'–ó–¥–æ—Ä–æ–≤—å–µ: {user_pet["health"]}\n'
              f'–ù–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ: {user_pet["happiness"]}\n'
              f'–ß–∏—Å—Ç–æ—Ç–∞: {user_pet["grooming"]}\n'
              f'–≠–Ω–µ—Ä–≥–∏—è: {user_pet["energy"]}\n'
              f'–ì–æ–ª–æ–¥: {user_pet["hunger"]}\n'
              )
    if user_pet['sick']:
        answer += '–Ø –∑–∞–±–æ–ª–µ–ª('
    else:
        answer += '–Ø –∑–¥–æ—Ä–æ–≤)'
    await query.message.reply_text(answer)

    logging.info(f'–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {update.effective_user.id} –ø–æ–∫–æ—Ä–º–∏–ª –ø–∏—Ç–æ–º—Ü–∞')


async def process_user_message(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """ –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–æ–±—â–µ–Ω–∏–π.
        –ü–µ—Ä–µ–¥–∞–µ—Ç —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –¥—Ä—É–≥–∏–º —Ñ—É–Ω–∫—Ü–∏—è–º –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
        –ï—Å–ª–∏ waiting_for_name = True, —Ç–æ –æ–∂–∏–¥–∞–µ—Ç –≤–≤–æ–¥–∞ –∏–º–µ–Ω–∏ –ø–∏—Ç–æ–º—Ü–∞
        –ï—Å–ª–∏ rename = True, —Ç–æ –æ–∂–∏–¥–∞–µ—Ç –≤–≤–æ–¥–∞ –Ω–æ–≤–æ–≥–æ –∏–º–µ–Ω–∏
    """

    if context.user_data.get('waiting_for_name'):
        await input_name(update, context)
    if context.user_data.get('rename'):
        await input_name_for_rename(update, context)


@utilites.validation_name
async def input_name(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """ –í–≤–æ–¥ –∏–º–µ–Ω–∏ –ø–∏—Ç–æ–º—Ü–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ """

    pet_name = update.message.text
    pet_type = context.user_data.get('pet_type')
    context.user_data['pet_name'] = pet_name

    await create_user_tamagochi(update.effective_user.id,
                                pet_name,
                                pet_type)
    answer = (f'–ü—Ä–∏–≤–µ—Ç! –Ø —Ç–≤–æ–π –Ω–æ–≤—ã–π –ø–∏—Ç–æ–º–µ—Ü {pet_type} –ø–æ –∏–º–µ–Ω–∏ {pet_name} üêæ\n!'
              f'–í–æ—Ç –∫–∞–∫ —Ç—ã –º–æ–∂–µ—à—å —Å–æ –º–Ω–æ–π –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–æ–≤–∞—Ç—å:\n'
              f'1. –ö–æ—Ä–º–∏—Ç—å –º–µ–Ω—è - /feed üçΩÔ∏è\n'
              f'2. –ò–≥—Ä–∞—Ç—å —Å–æ –º–Ω–æ–π - /play üéæ\n'
              f'3. –£–∫–ª–∞–¥—ã–≤–∞—Ç—å —Å–ø–∞—Ç—å - /sleep üí§\n'
              f'4. –õ–µ—á–∏—Ç—å –º–µ–Ω—è, –µ—Å–ª–∏ —è –∑–∞–±–æ–ª–µ—é - /heal üíä\n'
              f'5. –ü–æ–º–µ–Ω—è—Ç—å –º–Ω–µ –∏–º—è - /rename ‚úèÔ∏è\n'
              f'6. –£–∑–Ω–∞—Ç—å –∫–∞–∫ —è —Å–µ–±—è —á—É–≤—Å—Ç–≤—É—é - /check ‚ù§Ô∏è\n'
              f'–Ø —Å –Ω–µ—Ç–µ—Ä–ø–µ–Ω–∏–µ–º –∂–¥—É, —á—Ç–æ–±—ã –ø—Ä–æ–≤–µ—Å—Ç–∏ –≤—Ä–µ–º—è —Å —Ç–æ–±–æ–π!')
    await update.message.reply_text(answer)
    logging.info(f'–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {update.effective_user.id} –≤—ã–±—Ä–∞–ª –∏–º—è –ø–∏—Ç–æ–º—Ü–∞ {pet_name}')

    del context.user_data['pet_type']
    del context.user_data['pet_name']
    del context.user_data['waiting_for_name']


@utilites.validation_name
async def input_name_for_rename(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """ –í–≤–æ–¥ –∏–º–µ–Ω–∏ –ø–∏—Ç–æ–º—Ü–∞ –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è """

    new_name = update.message.text
    await rename(update.effective_user, new_name)
    await update.message.reply_text(f'–¢–µ–ø–µ—Ä—å –º–µ–Ω—è –∑–æ–≤—É—Ç {new_name}')
    del context.user_data['rename']
    logging.info(f'–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {update.effective_user.id} –ø–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–ª –ø–∏—Ç–æ–º—Ü–∞')


@check_pet_exists
async def check_pet_stats(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """ –í—ã–¥–∞–µ—Ç —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–∏—Ç–æ–º—Ü–∞ """

    pet = await get_user_tamagochi(update.effective_user)
    answer = (f'–Ø —Å–µ–±—è —á—É–≤—Å—Ç–≤—É—é –≤–æ—Ç —Ç–∞–∫:\n'
              f'–ó–¥–æ—Ä–æ–≤—å–µ: {pet.health}\n'
              f'–ù–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ: {pet.happiness}\n'
              f'–ß–∏—Å—Ç–æ—Ç–∞: {pet.grooming}\n'
              f'–≠–Ω–µ—Ä–≥–∏—è: {pet.energy}\n'
              f'–ì–æ–ª–æ–¥: {pet.hunger}\n'
              )
    if pet.sick:
        answer += '–Ø –∑–∞–±–æ–ª–µ–ª('
    else:
        answer += '–Ø –∑–¥–æ—Ä–æ–≤)'
    await update.message.reply_text(answer)
    logging.info(f'–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {update.effective_user.id} –ø—Ä–æ–≤–µ—Ä–∏–ª —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–∏—Ç–æ–º—Ü–∞')


def main():
    application = ApplicationBuilder().token(TELEGRAM_BOT_TOKEN).build()

    application.add_handler(CommandHandler('start', start))
    application.add_handler(CommandHandler('create_pet', create_pet))
    application.add_handler(CommandHandler('rename', rename_pet))
    application.add_handler(CommandHandler('feed', feed))
    application.add_handler(CommandHandler('check', check_pet_stats))
    application.add_handler(CallbackQueryHandler(choose_pet, pattern=r'pet_.*$'))
    application.add_handler(CallbackQueryHandler(choose_food, pattern=r'food_.*$'))
    application.add_handler(
        MessageHandler(filters.TEXT & ~filters.COMMAND, process_user_message))

    application.run_polling()


# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ –∏–∑ –ø—Ä–æ–µ–∫—Ç–∞
if __name__ == '__main__':
    main()
